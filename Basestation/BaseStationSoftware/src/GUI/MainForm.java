/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Consumers.AbstractBufferedConsumer;
import Consumers.DatabaseLogger;
import Consumers.GUIConnector;
import Consumers.ServerConnector;
import GSMCommunication.SendSMSCommands;
import decoders.ExternalDecoder;
import decoders.GSMDecoder;
import decoders.ManualInputDecoder;
import decoders.MorseDecoder;
import decoders.common.BalloonDataDecoder;
import decoders.common.DataPackage;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MapMarkerDot;
import org.openstreetmap.gui.jmapviewer.tilesources.OfflineOsmTileSource;

/**
 * The Main Form. 42.
 *
 * @author Michael Kolb
 */
public class MainForm extends javax.swing.JFrame {

    private static MainForm instance;

    public static MainForm getInstance() {
        if (instance == null) {
            instance = new MainForm();
        }
        return instance;
    }

    /**
     * Creates new form MainForm
     */
    private MainForm() {
        initComponents();
        pnlMagnitudeCW.setAlternationWaveformEnabled(true);
        pnlMagnitudeCW.setZoomFactor(0.3f);

        //pnlMap.setTileSource(new OfflineOsmTileSource("file://europe-latest.osm.pbf", 0, 10));
        sliderWeight.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                pnlSpectrumWaterfall.setMaxValue(sliderWeight.getValue() * 5f);
                CW_DECODER.setSignalBorder(sliderWeight.getValue() * 5f);
            }
        });

        sliderSquelch.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                CW_DECODER.setSquelch(sliderSquelch.getValue());
            }
        });

        pnlSpectrumWaterfall.addMarkerPositionChangedListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                CW_DECODER.setDetectionIndex(pnlSpectrumWaterfall.getMarkerIndex());
            }
        });

        btnSubmit.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                float lat = Float.parseFloat(edtLat.getText());
                float lon = Float.parseFloat(edtLon.getText());
                float accurancy = Float.parseFloat(edtAccurancy.getText());
                float vcc = Float.parseFloat(edtVCC.getText());

                float otemp = Float.parseFloat(edtOTemp.getText());
                float itemp = Float.parseFloat(edtITemp.getText());
                float pressure = Integer.parseInt(edtPressure.getText());
                float alt = Float.parseFloat(edtAltitude.getText());
                int humidity = Integer.parseInt(edtHumidity.getText());

                MANUAL_DECODER.submit(lat, lon, vcc, otemp, itemp, pressure, humidity, alt, accurancy);

            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlInputCW = new javax.swing.JPanel();
        pnlMagnitudeCW = new GUI.PanelMagnitudeDiagram();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sliderSquelch = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sliderWeight = new javax.swing.JSlider();
        pnlSpectrumWaterfall = new GUI.PanelWaterfallDiagram();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMorseCode = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMorseCharsReceived = new javax.swing.JTextArea();
        pnlInputExternal = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtExternalCharsReceived = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtDecodedExternal = new javax.swing.JTextArea();
        pnlInputManual = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        edtLat = new javax.swing.JFormattedTextField();
        edtLon = new javax.swing.JFormattedTextField();
        edtVCC = new javax.swing.JFormattedTextField();
        edtOTemp = new javax.swing.JFormattedTextField();
        edtITemp = new javax.swing.JFormattedTextField();
        edtPressure = new javax.swing.JFormattedTextField();
        btnSubmit = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        edtAccurancy = new javax.swing.JFormattedTextField();
        jLabel15 = new javax.swing.JLabel();
        edtHumidity = new javax.swing.JFormattedTextField();
        edtAltitude = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        pnlInputGSM = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        gsm_SetUp = new javax.swing.JButton();
        gsm_MakeGuardianPhone = new javax.swing.JButton();
        gsm_receiveInterval = new javax.swing.JButton();
        gsm_StopInterval = new javax.swing.JButton();
        gsm_ReceiveSingle = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        gsm_PasswordField = new javax.swing.JFormattedTextField();
        gsm_PhonenumberField = new javax.swing.JFormattedTextField();
        gsm_IntervalField = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        pnlMap = new JMapViewer();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtReceived = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        pnlInputCW.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                pnlInputCWComponentResized(evt);
            }
        });
        pnlInputCW.setLayout(new java.awt.GridBagLayout());

        javax.swing.GroupLayout pnlMagnitudeCWLayout = new javax.swing.GroupLayout(pnlMagnitudeCW);
        pnlMagnitudeCW.setLayout(pnlMagnitudeCWLayout);
        pnlMagnitudeCWLayout.setHorizontalGroup(
            pnlMagnitudeCWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1095, Short.MAX_VALUE)
        );
        pnlMagnitudeCWLayout.setVerticalGroup(
            pnlMagnitudeCWLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 53, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.2;
        pnlInputCW.add(pnlMagnitudeCW, gridBagConstraints);

        jLabel1.setText("Magnitude");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        pnlInputCW.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Spectrum");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        pnlInputCW.add(jLabel2, gridBagConstraints);

        sliderSquelch.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderSquelchStateChanged(evt);
            }
        });
        sliderSquelch.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                sliderSquelchCaretPositionChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlInputCW.add(sliderSquelch, gridBagConstraints);

        jLabel3.setText("Squelch");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        pnlInputCW.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Weight");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        pnlInputCW.add(jLabel4, gridBagConstraints);

        sliderWeight.setMaximum(1000000);
        sliderWeight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderWeightStateChanged(evt);
            }
        });
        sliderWeight.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                sliderWeightCaretPositionChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlInputCW.add(sliderWeight, gridBagConstraints);

        pnlSpectrumWaterfall.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        javax.swing.GroupLayout pnlSpectrumWaterfallLayout = new javax.swing.GroupLayout(pnlSpectrumWaterfall);
        pnlSpectrumWaterfall.setLayout(pnlSpectrumWaterfallLayout);
        pnlSpectrumWaterfallLayout.setHorizontalGroup(
            pnlSpectrumWaterfallLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1095, Short.MAX_VALUE)
        );
        pnlSpectrumWaterfallLayout.setVerticalGroup(
            pnlSpectrumWaterfallLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 307, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.4;
        pnlInputCW.add(pnlSpectrumWaterfall, gridBagConstraints);

        jLabel5.setText("Morse Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        pnlInputCW.add(jLabel5, gridBagConstraints);

        jLabel6.setText("Text");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        pnlInputCW.add(jLabel6, gridBagConstraints);

        txtMorseCode.setEditable(false);
        txtMorseCode.setColumns(20);
        txtMorseCode.setRows(5);
        jScrollPane1.setViewportView(txtMorseCode);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 10;
        pnlInputCW.add(jScrollPane1, gridBagConstraints);

        txtMorseCharsReceived.setEditable(false);
        txtMorseCharsReceived.setColumns(20);
        txtMorseCharsReceived.setRows(5);
        jScrollPane2.setViewportView(txtMorseCharsReceived);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 10;
        pnlInputCW.add(jScrollPane2, gridBagConstraints);

        jTabbedPane1.addTab("<html><font color=\"blue\">Input - CW</font></html>", pnlInputCW);

        txtExternalCharsReceived.setEditable(false);
        txtExternalCharsReceived.setColumns(20);
        txtExternalCharsReceived.setLineWrap(true);
        txtExternalCharsReceived.setRows(5);
        jScrollPane4.setViewportView(txtExternalCharsReceived);

        txtDecodedExternal.setEditable(false);
        txtDecodedExternal.setColumns(20);
        txtDecodedExternal.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        txtDecodedExternal.setLineWrap(true);
        txtDecodedExternal.setRows(5);
        jScrollPane5.setViewportView(txtDecodedExternal);

        javax.swing.GroupLayout pnlInputExternalLayout = new javax.swing.GroupLayout(pnlInputExternal);
        pnlInputExternal.setLayout(pnlInputExternalLayout);
        pnlInputExternalLayout.setHorizontalGroup(
            pnlInputExternalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInputExternalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInputExternalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1087, Short.MAX_VALUE)
                    .addComponent(jScrollPane5))
                .addContainerGap())
        );
        pnlInputExternalLayout.setVerticalGroup(
            pnlInputExternalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInputExternalLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("<html><font color=\"#AFAF00\">Input - External</font></html>", pnlInputExternal);

        pnlInputManual.setLayout(new java.awt.GridBagLayout());

        jLabel7.setText("Latitude");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlInputManual.add(jLabel7, gridBagConstraints);

        jLabel8.setText("Longitude");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlInputManual.add(jLabel8, gridBagConstraints);

        jLabel9.setText("VCC");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlInputManual.add(jLabel9, gridBagConstraints);

        jLabel11.setText("Outside Temp");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlInputManual.add(jLabel11, gridBagConstraints);

        jLabel12.setText("Inside Temp");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlInputManual.add(jLabel12, gridBagConstraints);

        jLabel13.setText("Pressure");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlInputManual.add(jLabel13, gridBagConstraints);

        edtLat.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0.######"))));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlInputManual.add(edtLat, gridBagConstraints);

        edtLon.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0.######"))));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlInputManual.add(edtLon, gridBagConstraints);

        edtVCC.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0.#"))));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        pnlInputManual.add(edtVCC, gridBagConstraints);

        edtOTemp.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0.#"))));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        pnlInputManual.add(edtOTemp, gridBagConstraints);

        edtITemp.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##0.#"))));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        pnlInputManual.add(edtITemp, gridBagConstraints);

        edtPressure.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        pnlInputManual.add(edtPressure, gridBagConstraints);

        btnSubmit.setText("Submit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        pnlInputManual.add(btnSubmit, gridBagConstraints);

        jLabel14.setText("Accurancy");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlInputManual.add(jLabel14, gridBagConstraints);

        edtAccurancy.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        pnlInputManual.add(edtAccurancy, gridBagConstraints);

        jLabel15.setText("Humidity");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        pnlInputManual.add(jLabel15, gridBagConstraints);

        edtHumidity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        pnlInputManual.add(edtHumidity, gridBagConstraints);

        edtAltitude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edtAltitudeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        pnlInputManual.add(edtAltitude, gridBagConstraints);

        jLabel10.setText("Altitude");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        pnlInputManual.add(jLabel10, gridBagConstraints);

        jTabbedPane1.addTab("<html><font color=\"green\">Input - Manual</font></html>", pnlInputManual);

        jLabel16.setText("Telephonenummber");

        jLabel17.setText("Pin of the tracker");

        gsm_SetUp.setText("Set up connection");
        gsm_SetUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gsm_SetUpActionPerformed(evt);
            }
        });

        gsm_MakeGuardianPhone.setText("Make number to \"Guardian Number\"");
        gsm_MakeGuardianPhone.setEnabled(false);
        gsm_MakeGuardianPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gsm_MakeGuardianPhoneActionPerformed(evt);
            }
        });

        gsm_receiveInterval.setText("Receive interval SMS");
        gsm_receiveInterval.setEnabled(false);
        gsm_receiveInterval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gsm_receiveIntervalActionPerformed(evt);
            }
        });

        gsm_StopInterval.setText("Stop interval receiving");
        gsm_StopInterval.setEnabled(false);
        gsm_StopInterval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gsm_StopIntervalActionPerformed(evt);
            }
        });

        gsm_ReceiveSingle.setText("Receive singele SMS");
        gsm_ReceiveSingle.setEnabled(false);
        gsm_ReceiveSingle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gsm_ReceiveSingleActionPerformed(evt);
            }
        });

        jLabel18.setText("  Interval in minutes:");

        gsm_PasswordField.setText("0000");

        gsm_PhonenumberField.setText("491757632243");

        gsm_IntervalField.setText("1");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addGap(34, 34, 34)))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(gsm_PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(gsm_SetUp, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(gsm_PhonenumberField)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(gsm_receiveInterval, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(gsm_StopInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gsm_IntervalField))
                            .addComponent(gsm_ReceiveSingle, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(gsm_MakeGuardianPhone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(gsm_PhonenumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gsm_SetUp)
                    .addComponent(gsm_PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gsm_receiveInterval)
                    .addComponent(jLabel18)
                    .addComponent(gsm_IntervalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gsm_StopInterval)
                    .addComponent(gsm_ReceiveSingle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gsm_MakeGuardianPhone)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlInputGSMLayout = new javax.swing.GroupLayout(pnlInputGSM);
        pnlInputGSM.setLayout(pnlInputGSMLayout);
        pnlInputGSMLayout.setHorizontalGroup(
            pnlInputGSMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInputGSMLayout.createSequentialGroup()
                .addGap(311, 311, 311)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(395, Short.MAX_VALUE))
        );
        pnlInputGSMLayout.setVerticalGroup(
            pnlInputGSMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInputGSMLayout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(254, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("<html><font color=\"red\">Input - GSM</font></html>", pnlInputGSM);

        jSplitPane1.setDividerLocation(500);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Position"));

        javax.swing.GroupLayout pnlMapLayout = new javax.swing.GroupLayout(pnlMap);
        pnlMap.setLayout(pnlMapLayout);
        pnlMapLayout.setHorizontalGroup(
            pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlMapLayout.setVerticalGroup(
            pnlMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 533, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlMap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(pnlMap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel1);

        txtReceived.setEditable(false);
        txtReceived.setColumns(20);
        txtReceived.setFont(new java.awt.Font("Courier New", 0, 10)); // NOI18N
        txtReceived.setRows(5);
        txtReceived.setText("Received Data\n");
        jScrollPane3.setViewportView(txtReceived);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel3);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        jTabbedPane1.addTab("Output", jPanel2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        CW_DECODER.stop();

    }//GEN-LAST:event_formWindowClosed

    private void sliderSquelchCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_sliderSquelchCaretPositionChanged

    }//GEN-LAST:event_sliderSquelchCaretPositionChanged

    private void pnlInputCWComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pnlInputCWComponentResized
        sliderSquelch.setMaximum(this.getWidth());
        sliderWeight.setMaximum(this.getWidth());
    }//GEN-LAST:event_pnlInputCWComponentResized

    private void sliderWeightCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_sliderWeightCaretPositionChanged

    }//GEN-LAST:event_sliderWeightCaretPositionChanged

    private void sliderWeightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderWeightStateChanged


    }//GEN-LAST:event_sliderWeightStateChanged

    private void sliderSquelchStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderSquelchStateChanged

    }//GEN-LAST:event_sliderSquelchStateChanged

    private void edtAltitudeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edtAltitudeActionPerformed

    }//GEN-LAST:event_edtAltitudeActionPerformed

    private void gsm_SetUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gsm_SetUpActionPerformed
        if (setUp) {
            if (GSM_DECODER.isReadyToCommunicate()) {
                sendCommands = new SendSMSCommands(OUTGOING_GSM_FOLDER, gsm_PhonenumberField.getText(), gsm_PasswordField.getText());
                gsm_SetUp.setText("conclude");
                gsm_PhonenumberField.setEnabled(false);
                gsm_PasswordField.setEnabled(false);
                gsm_MakeGuardianPhone.setEnabled(true);
                gsm_ReceiveSingle.setEnabled(true);
                gsm_StopInterval.setEnabled(true);
                gsm_receiveInterval.setEnabled(true);
                gsm_IntervalField.setEnabled(true);
                setUp = false;
            } else {
                GSM_DECODER.restartCommunication();
            }
        } else {
            sendCommands = null;
            gsm_SetUp.setText("Set up connection");
            gsm_PhonenumberField.setEnabled(true);
            gsm_PasswordField.setEnabled(true);
            gsm_MakeGuardianPhone.setEnabled(false);
            gsm_ReceiveSingle.setEnabled(false);
            gsm_StopInterval.setEnabled(false);
            gsm_receiveInterval.setEnabled(false);
            gsm_IntervalField.setEnabled(false);
            setUp = true;
        }
    }//GEN-LAST:event_gsm_SetUpActionPerformed

    private void gsm_receiveIntervalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gsm_receiveIntervalActionPerformed
       sendCommands.intervalGPSInfo(new Integer(gsm_IntervalField.getText()));
    }//GEN-LAST:event_gsm_receiveIntervalActionPerformed

    private void gsm_StopIntervalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gsm_StopIntervalActionPerformed
        sendCommands.stopGPSinterval();
    }//GEN-LAST:event_gsm_StopIntervalActionPerformed

    private void gsm_ReceiveSingleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gsm_ReceiveSingleActionPerformed
       sendCommands.singleGPSInfo();
    }//GEN-LAST:event_gsm_ReceiveSingleActionPerformed

    private void gsm_MakeGuardianPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gsm_MakeGuardianPhoneActionPerformed
        sendCommands.buddyPhoneNumber(gsm_PhonenumberField.getText());
    }//GEN-LAST:event_gsm_MakeGuardianPhoneActionPerformed

    private static final ManualInputDecoder MANUAL_DECODER = new ManualInputDecoder();
    private static final MorseDecoder CW_DECODER = new MorseDecoder();

    private static final GUIConnector GUI_CONNECTOR = new GUIConnector();
    private static final GSMDecoder GSM_DECODER = new GSMDecoder();
    private static final ExternalDecoder EXT_DECODER = new ExternalDecoder();

    private final String OUTGOING_GSM_FOLDER = "/Users/Shared/smsSpool/outgoing/";
    private SendSMSCommands sendCommands;
    private boolean setUp = true;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        if (args.length < 1) {
            System.err.println("Params: <server url>");
        }

        Logger log = LogManager.getLogManager().getLogger("");
        for (Handler h : log.getHandlers()) {
            h.setLevel(Level.ALL);
        }
        //log.setLevel(Level.FINE);

        Logger.getLogger("main").log(Level.INFO, "Starting...");

        ServerConnector serverConsumer = new ServerConnector(args.length > 0 ? args[0] : "http://localhost:8000");
        serverConsumer.start();

        File dbFile = new File(System.getProperty("user.home"), "balloonTelemetry.sqlite3");
        DatabaseLogger dbLogger = new DatabaseLogger(dbFile);
        dbLogger.start();
        
        GUI_CONNECTOR.start();

        CW_DECODER.subscribe(serverConsumer);
        CW_DECODER.subscribe(dbLogger);
        CW_DECODER.subscribe(GUI_CONNECTOR);

        MANUAL_DECODER.subscribe(dbLogger);
        MANUAL_DECODER.subscribe(GUI_CONNECTOR);
        MANUAL_DECODER.subscribe(serverConsumer);

        GSM_DECODER.subscribe(dbLogger);
        GSM_DECODER.subscribe(GUI_CONNECTOR);
        GSM_DECODER.subscribe(serverConsumer);

        EXT_DECODER.subscribe(dbLogger);
        EXT_DECODER.subscribe(GUI_CONNECTOR);
        EXT_DECODER.subscribe(serverConsumer);

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        CW_DECODER.listen();
        MANUAL_DECODER.listen();
        GSM_DECODER.listen();
        EXT_DECODER.listen();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                getInstance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSubmit;
    private javax.swing.JFormattedTextField edtAccurancy;
    private javax.swing.JTextField edtAltitude;
    private javax.swing.JFormattedTextField edtHumidity;
    private javax.swing.JFormattedTextField edtITemp;
    private javax.swing.JFormattedTextField edtLat;
    private javax.swing.JFormattedTextField edtLon;
    private javax.swing.JFormattedTextField edtOTemp;
    private javax.swing.JFormattedTextField edtPressure;
    private javax.swing.JFormattedTextField edtVCC;
    private javax.swing.JFormattedTextField gsm_IntervalField;
    private javax.swing.JButton gsm_MakeGuardianPhone;
    private javax.swing.JFormattedTextField gsm_PasswordField;
    private javax.swing.JFormattedTextField gsm_PhonenumberField;
    private javax.swing.JButton gsm_ReceiveSingle;
    private javax.swing.JButton gsm_SetUp;
    private javax.swing.JButton gsm_StopInterval;
    private javax.swing.JButton gsm_receiveInterval;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel pnlInputCW;
    private javax.swing.JPanel pnlInputExternal;
    private javax.swing.JPanel pnlInputGSM;
    private javax.swing.JPanel pnlInputManual;
    private GUI.PanelMagnitudeDiagram pnlMagnitudeCW;
    private javax.swing.JPanel pnlMap;
    private GUI.PanelWaterfallDiagram pnlSpectrumWaterfall;
    private javax.swing.JSlider sliderSquelch;
    private javax.swing.JSlider sliderWeight;
    private javax.swing.JTextArea txtDecodedExternal;
    private javax.swing.JTextArea txtExternalCharsReceived;
    private javax.swing.JTextArea txtMorseCharsReceived;
    private javax.swing.JTextArea txtMorseCode;
    private javax.swing.JTextArea txtReceived;
    // End of variables declaration//GEN-END:variables

    public void displayMorseRAW(byte[] rawData) {
        pnlMagnitudeCW.display(rawData);

    }

    public void displayMorseSpectrum(float[] frawData) {
        pnlSpectrumWaterfall.display(frawData);

    }

    public void addDecodedSignal(String C) {
        txtMorseCode.append(C);

    }

    public void addDecodedChar(BalloonDataDecoder DECODER, String C) {
        if (DECODER instanceof MorseDecoder) {
            txtMorseCharsReceived.append(C);
        } else if (DECODER instanceof ExternalDecoder) {
            txtExternalCharsReceived.append(C);
        }

    }

    public void setLiveData(BalloonDataDecoder decoder, DataPackage data) {
        if (data == null) {
            return;
        }

        Color c = null;
        if (decoder.identifier().equals(CW_DECODER.identifier())) {
            c = Color.blue;
        } else if (decoder.identifier().equals(MANUAL_DECODER.identifier())) {
            c = Color.green;

        } else if (decoder.identifier().equals(GSM_DECODER.identifier())) {
            c = Color.RED;
        } else if (decoder.identifier().equals(EXT_DECODER.identifier())){
            c = Color.PINK;
        }

        txtReceived.append(data.toString() + "\n");
        ((JMapViewer) pnlMap).addMapMarker(new MapMarkerDot(c, data.getLatitude(), data.getLongitude()));
    }

    
    

  
}
