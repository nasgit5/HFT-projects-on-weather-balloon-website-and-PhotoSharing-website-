/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package GUI;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Michael Kolb <dev(at)db1smk(dot)com>
 */
public abstract class PanelAbstractDiagram extends javax.swing.JPanel {

    private final Queue<float[]> BUFFER=new LinkedList<>();
    private int buffersize;
    
    
    private final LinkedList<ChangeListener> MARKER_LISTENERS = new LinkedList<>();
    /**
     * Creates new form PanelAbstractDiagram
     * @param buffersize
     */
    public PanelAbstractDiagram(int buffersize) {
        setBufferSize(buffersize);
        initComponents();
    }

    protected void setBufferSize(int buffersize){
        this.buffersize=buffersize;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    
    
    protected void fireMarkerChanged(){
        for (ChangeListener changeListener : MARKER_LISTENERS) {
            changeListener.stateChanged(new ChangeEvent(this));
        }
    }
    
    public void addMarkerPositionChangedListener(ChangeListener listener){
        MARKER_LISTENERS.add(listener);
    }
    /**
     * Display some float data
     *
     * @param data
     */
    public void display(float[] data) {
        BUFFER.add(data);
        if(BUFFER.size() > buffersize){
            BUFFER.poll();
        }
        repaint();
    }
    
    
    /**
     * Display some byte data
     *
     * @param data
     */
    public void display(byte[] data) {
        float[] tmp = new float[data.length];
        for (int i = 0; i < data.length; i++) {
            tmp[i]=data[i];
        }
        this.display(tmp);
    }
    
    
    protected Iterator<float[]> iterateBuffer(){
        return BUFFER.iterator();
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
