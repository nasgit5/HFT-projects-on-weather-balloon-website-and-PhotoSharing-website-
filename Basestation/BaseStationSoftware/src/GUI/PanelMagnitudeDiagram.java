/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Color;
import java.awt.Graphics;
import java.util.Iterator;

/**
 * Panel for showing magnitude Diagrammes
 *
 * @author Michael Kolb
 */
public class PanelMagnitudeDiagram extends PanelAbstractDiagram {

    Integer markerIndex = null;
    int filterBegin = Integer.MIN_VALUE;
    int filterEnd = Integer.MAX_VALUE;
    private float zoomFactor = 10.0f;

    
   
    /**
     * Creates new form PanelMagnitudeDiagram
     */
    public PanelMagnitudeDiagram() {
        super(1);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 371, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 57, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        markerIndex=evt.getX();

    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    boolean alternationWaveformEnabled = false;

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        final int HEIGH_PER_DIAGRAMME_SIDE = this.getHeight() / (alternationWaveformEnabled ? 2 : 1);
        g.setColor(Color.blue);
        int xCoord = 0;

        Iterator<float[]> it = iterateBuffer();
        while (it.hasNext()) {
            float[] buffer = it.next();
            final float VALUE2PIXELS_FACTOR = HEIGH_PER_DIAGRAMME_SIDE / (Byte.MAX_VALUE * zoomFactor);

            for (int i = 0; i < buffer.length && i < this.getWidth(); i++) {
                float b = buffer[i];
                
                if (xCoord >= filterBegin && xCoord <= filterEnd) {
                    g.setColor(Color.blue);
                } else {
                    g.setColor(Color.gray);
                }

                int valueInPixels = (int) (b * VALUE2PIXELS_FACTOR);
                g.drawLine(xCoord, HEIGH_PER_DIAGRAMME_SIDE, xCoord, HEIGH_PER_DIAGRAMME_SIDE - valueInPixels);

                xCoord++;

            }
        }

        g.setColor(Color.MAGENTA);
        g.drawLine(filterBegin, 0, filterBegin, this.getHeight());
        g.drawLine(filterEnd, 0, filterEnd, this.getHeight());

        g.setColor(Color.red);
        g.drawLine(0, HEIGH_PER_DIAGRAMME_SIDE, this.getWidth(), HEIGH_PER_DIAGRAMME_SIDE);

        if (markerIndex != null) {
            g.setColor(Color.GREEN);
            g.drawLine(markerIndex, 0, markerIndex, this.getHeight());
            g.fillPolygon(new int[]{markerIndex - 10, markerIndex, markerIndex + 10}, new int[]{this.getHeight(), this.getHeight() - 20, this.getHeight()}, 3);
        }

    }

    /**
     * Display the marker
     *
     * @param peak Array index where the marker should appear
     */
    public void displayMarker(int peak) {
        markerIndex = peak;
        repaint();
    }

    /**
     * Set this to true to split the diagramm in a lower and a upper waveform
     * part
     *
     * @param b
     */
    public void setAlternationWaveformEnabled(boolean b) {
        alternationWaveformEnabled = b;
    }

    public void setZoomFactor(float factor) {
        zoomFactor = factor;
    }

    /**
     * Sets the filtered range. Values outside this range will be drawn grayed
     * out.
     *
     * @param start
     * @param end
     */
    public void setFilterRange(int start, int end) {
        filterBegin = start;
        filterEnd = end;
    }
}
