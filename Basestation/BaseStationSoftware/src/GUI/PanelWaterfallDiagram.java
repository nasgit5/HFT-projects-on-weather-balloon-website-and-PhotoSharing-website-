/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package GUI;

import java.awt.Color;
import java.awt.Graphics;
import java.util.Iterator;

/**
 *
 * @author Michael Kolb <dev(at)db1smk(dot)com>
 */
public class PanelWaterfallDiagram extends PanelAbstractDiagram {

    private final int ZOOMFACTOR=8;
    private Integer markerIndex=null;
     
    /**
     * Maximum value for spectrum (equals color red)
     */
    float MAX_VALUE=40000;
    
    /**
     * Creates new form PanelWaterfallDiagram
     */
    public PanelWaterfallDiagram() {
        super(100);
        initComponents();
    }

    
    /**
     * Sets the value which is considered as max value. Values greater than this value will be displayed in red color
     * @param maxval 
     */
    public void setMaxValue(float maxval){
        MAX_VALUE=maxval;
    }
    
    
    public Color calcColor(float currentValue){
           
        float max_color_value=255+255+255;//r+g+b max value
        //scale this to our MAX_VALUE
        float scaled_max_color_val=(max_color_value/MAX_VALUE)*currentValue;
        //split into r g b parts
        int r=0;
        int g=0;
        int b=0;
                
        if(scaled_max_color_val < 255) {
            b=(int)Math.max(0, scaled_max_color_val);
        } else if(scaled_max_color_val > 255 && scaled_max_color_val < 255*2){
            g=(int)Math.max(0, scaled_max_color_val-255);
        } else if(scaled_max_color_val > 255*2 ){
            r=(int)Math.max(0, scaled_max_color_val-255*2);
            r=Math.min(r, 255);
        }
        
        return new Color(r, g, b);
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); //To change body of generated methods, choose Tools | Templates.
        
        setBufferSize(Math.min(1000, this.getHeight()));
        Iterator<float[]> it=iterateBuffer();
       
        for (int ycoord = 0; it.hasNext(); ycoord++) {
            float[] row=it.next();
            float maxval=Float.MIN_VALUE;
            for (int i = 0; i < row.length && i < this.getWidth(); i++) {
                float f = row[i];
                
                g.setColor(calcColor(f));
                g.drawRect(i*ZOOMFACTOR, ycoord, ZOOMFACTOR, 1);
                
                maxval=Math.max(maxval, f);
            }
        }
        
        if (markerIndex != null) {
            g.setColor(Color.GREEN);
            g.drawLine(markerIndex, 0, markerIndex, this.getHeight());
            g.fillPolygon(new int[]{markerIndex - 10, markerIndex, markerIndex + 10}, new int[]{this.getHeight(), this.getHeight() - 20, this.getHeight()}, 3);
        }
        
        
    }

    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        markerIndex=evt.getX();
        fireMarkerChanged();
    }//GEN-LAST:event_formMouseClicked


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public Integer getMarkerIndex() {
        return markerIndex/ZOOMFACTOR;
    }
}
